image: tmaier/docker-compose:18.09

# Set our container base image to "docker" and attach a service called "docker-in-docker".
# This will allow us to run Docker commands inside our CI container
services:
  - docker:18.05-dind

# Stages will run one after another and only execute if the previous stage completed successfully
stages:
  - build
  - test
  - deploy

variables:
  PHP_CONTAINER_RELEASE_IMAGE: registry.gitlab.com/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/php:latest
  NGINX_CONTAINER_RELEASE_IMAGE: registry.gitlab.com/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/nginx:latest
  BUILDCHAIN_IMAGE: registry.gitlab.com/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/buildchain:latest

# Login to our registry and perform any additional setup before executing our CI tasks
before_script:
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
  - apk update
  - apk upgrade

  # For automated updates, store our SSH key in a variable that can be used by our SSH client in the deployment step
  #- apk add openssh-client
  #- eval $(ssh-agent -s)
  #- mkdir -p ~/.ssh
  #- echo "$PRODUCTION_SSH_KEY" > ~/.ssh/production_rsa
  #- chmod 600 ~/.ssh/production_rsa
  #- '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

build:
  stage: build
  script:
    # If we have images that have NOT changed, please use the existing image(s) in this process
    - docker pull $PHP_CONTAINER_RELEASE_IMAGE || true
    - docker pull $BUILDCHAIN_IMAGE || true
    # Execute our buildchain
    - docker-compose run --rm buildchain yarn run build
    - docker-compose push buildchain
    # Build our Docker images
    - docker build -f docker-config/php/Dockerfile --pull --cache-from $PHP_CONTAINER_RELEASE_IMAGE -t $PHP_CONTAINER_RELEASE_IMAGE .
    - docker build -f docker-config/nginx/Dockerfile --pull -t $NGINX_CONTAINER_RELEASE_IMAGE .
    # Push our Docker images to our registry
    - docker push $PHP_CONTAINER_RELEASE_IMAGE
    - docker push $NGINX_CONTAINER_RELEASE_IMAGE

test:
  stage: test
  script:
    - docker-compose -f docker-compose-ci.yml up -d
    - sleep 30;
    - cat dbdumps/dump.sql | docker exec -i $(docker-compose ps -q database) mysql -u project -p"project" project
    - mkdir reports && chmod 777 reports
    - wget https://raw.githubusercontent.com/jfrazelle/dotfiles/master/etc/docker/seccomp/chrome.json -O ./chrome.json
    - docker run --network ${CI_PROJECT_NAME}_default --rm -v $(pwd)/reports:/home/chrome/reports --security-opt seccomp=./chrome.json femtopixel/google-lighthouse http://nginx
  artifacts:
    paths:
      - ./reports
    expire_in: 1 week

deploy:
  stage: deploy
  script:
    # TODO - Double check the user, server IP, and folder. Note how this can be extended to login and push code to different servers (staging, production, etc)
    # Log in to our server and perform the Docker `pull` and `up -d` commands on our behalf
    - ssh -i ~/.ssh/production_rsa root@your.server.ip 'cd ~/craft-in-docker && docker-compose pull && docker-compose up -d'
  only:
    - master
  # Uncomment this if you want the deployment to be manual via the GitLab UI
  # when: manual
  environment:
    name: production
